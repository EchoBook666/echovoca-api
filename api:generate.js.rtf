{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // api/generate.js\
export default async function handler(req, res) \{\
  // 
\f1 \'d6\'bb\'d4\'ca\'d0\'ed
\f0  POST 
\f1 \'c7\'eb\'c7\'f3
\f0 \
  if (req.method !== 'POST') \{\
    return res.status(405).json(\{ error: 'Method not allowed' \});\
  \}\
\
  try \{\
    const \{ imageUrl, prompt \} = req.body;\
    \
    // 
\f1 \'b5\'da\'d2\'bb\'b2\'bd\'a3\'ba\'b7\'a2\'cb\'cd\'c9\'fa\'b3\'c9\'c7\'eb\'c7\'f3\'b5\'bd
\f0  DreamO\
    const generateResponse = await fetch('https://echovoca-dreamo-echovoca.hf.space/gradio_api/call/generate_image', \{\
      method: 'POST',\
      headers: \{\
        'Content-Type': 'application/json',\
        'Authorization': `Bearer $\{process.env.HF_TOKEN\}`\
      \},\
      body: JSON.stringify(\{\
        data: [\
          \{"path": imageUrl, "meta": \{"_type": "gradio.FileData"\}\},\
          "",\
          "ip",\
          "style",\
          prompt || "romantic postcard watercolor style, soft pastel colors, dreamy atmosphere",\
          "",\
          1024,\
          1024,\
          512,\
          12,\
          4.5,\
          1,\
          0,\
          0,\
          "",\
          3.5,\
          0\
        ]\
      \})\
    \});\
\
    const generateData = await generateResponse.json();\
    const eventId = generateData.event_id;\
\
    // 
\f1 \'b5\'c8\'b4\'fd
\f0  10 
\f1 \'c3\'eb\'c8\'c3
\f0  DreamO 
\f1 \'c9\'fa\'b3\'c9\'cd\'bc\'c6\'ac
\f0 \
    await new Promise(resolve => setTimeout(resolve, 10000));\
\
    // 
\f1 \'b5\'da\'b6\'fe\'b2\'bd\'a3\'ba\'bb\'f1\'c8\'a1\'c9\'fa\'b3\'c9\'bd\'e1\'b9\'fb
\f0 \
    const resultResponse = await fetch(`https://echovoca-dreamo-echovoca.hf.space/gradio_api/call/generate_image/$\{eventId\}`, \{\
      headers: \{\
        'Authorization': `Bearer $\{process.env.HF_TOKEN\}`\
      \}\
    \});\
\
    const resultText = await resultResponse.text();\
    \
    // 
\f1 \'b4\'d3\'b7\'b5\'bb\'d8\'ce\'c4\'b1\'be\'d6\'d0\'cc\'e1\'c8\'a1\'cd\'bc\'c6\'ac
\f0 URL
\f1 \'a3\'a8\'bc\'f2\'bb\'af\'b4\'a6\'c0\'ed\'a3\'a9
\f0 \
    const lines = resultText.split('\\n');\
    let imageUrl = null;\
    \
    for (const line of lines) \{\
      if (line.includes('data:') && line.includes('http')) \{\
        try \{\
          const data = JSON.parse(line.replace('data: ', ''));\
          if (data && data[0] && typeof data[0] === 'string' && data[0].startsWith('http')) \{\
            imageUrl = data[0];\
            break;\
          \}\
        \} catch (e) \{\
          // 
\f1 \'bc\'cc\'d0\'f8\'b3\'a2\'ca\'d4\'cf\'c2\'d2\'bb\'d0\'d0
\f0 \
        \}\
      \}\
    \}\
\
    if (imageUrl) \{\
      res.json(\{ success: true, imageUrl: imageUrl \});\
    \} else \{\
      res.json(\{ success: false, error: 'No image generated' \});\
    \}\
\
  \} catch (error) \{\
    res.status(500).json(\{ success: false, error: error.message \});\
  \}\
\}\
}